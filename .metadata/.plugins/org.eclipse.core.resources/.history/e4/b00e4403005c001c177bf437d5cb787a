package com.rentacar.api.user.business.concretes;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.rentacar.api.user.business.abstracts.AuthenticationService;
import com.rentacar.api.user.business.abstracts.CorporateCustomerService;
import com.rentacar.api.user.business.abstracts.IndividualCustomerService;
import com.rentacar.api.user.business.abstracts.UserService;
import com.rentacar.api.user.business.requests.applicationUser.CreateIndividualCustomerRegisterRequest;
import com.rentacar.api.user.core.utilities.mapping.ModelMapperService;
import com.rentacar.api.user.core.utilities.result.Result;
import com.rentacar.api.user.core.utilities.rules.BusinessRules;

@Service
public class AuthenticationManager implements AuthenticationService {

	private UserService userService;
	private IndividualCustomerService individualCustomerService;
	private CorporateCustomerService corporateCustomerService;

	private ModelMapperService modelMapperService;

	@Autowired
	public AuthenticationManager(UserService userService, IndividualCustomerService individualCustomerService,
			CorporateCustomerService corporateCustomerService, ModelMapperService modelMapperService) {
		super();
		this.userService = userService;
		this.individualCustomerService = individualCustomerService;
		this.corporateCustomerService = corporateCustomerService;
		this.modelMapperService = modelMapperService;
	}


	public Result individualCustomerRegister(

			CreateIndividualCustomerRegisterRequest createIndividualCustomerRegisterRequest) {
		var result = BusinessRules.run(checkIfEmailExists(createIndividualCustomerRegisterRequest.getEmail()),
				confirmPassword(createIndividualCustomerRegisterRequest.getPassword(),
						createIndividualCustomerRegisterRequest.getPasswordConfirm()));

		if (result != null) {
			return result;
		}

		CreateIndividualCustomerRequest individualCustomerRequest = modelMapperService.forDto()
				.map(createIndividualCustomerRegisterRequest, CreateIndividualCustomerRequest.class);

		ApplicationUser appUser = this.createUser(createIndividualCustomerRegisterRequest.getEmail(),
				createIndividualCustomerRegisterRequest.getPassword()).getData();
		
		individualCustomerRequest.setApplicationUser(modelMapperService.forRequest()
				.map(appUser, ApplicationUserDto.class));

		this.individualCustomerService.add(individualCustomerRequest);
		return new SuccessResult(Messages.Register);
	}

	@Override
	public Result corporateCustomerRegister(CreateCorporateCustomerRegisterRequest createCorporateCustomerRequest) {

		var result = BusinessRules.run(checkIfEmailExists(createCorporateCustomerRequest.getEmail()),
				confirmPassword(createCorporateCustomerRequest.getPassword(),
						createCorporateCustomerRequest.getPasswordConfirm()));

		if (result != null) {
			return result;
		}

		CreateCorporateCustomerRequest corporateCustomerRequest = modelMapperService.forDto()
				.map(createCorporateCustomerRequest, CreateCorporateCustomerRequest.class);

		ApplicationUser appUser = this.createUser(createCorporateCustomerRequest.getEmail(),
				createCorporateCustomerRequest.getPassword()).getData();
		
		corporateCustomerRequest.setApplicationUser(modelMapperService.forDto()
				.map(appUser, ApplicationUserDto.class));

		this.corporateCustomerService.add(corporateCustomerRequest);
		return new SuccessResult(Messages.Register);
	}

	@Override
	public Result login(CreateLoginRequest createLoginRequest) {

		var result = BusinessRules.run(checkPassword(createLoginRequest));

		if (result != null) {
			return result;
		}

		return new SuccessResult(Messages.Login);
	}